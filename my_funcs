#!/usr/bin/env bash

#: Credits to Akhil Narang for his original function file that I modified for my own purposes.
#: Also thanks to any and all the other contributors as well.

#: SPDX-License-Identifier: GPL-3.0-only
#: Copyright(c) 2020
#: Author: clnelson@github.com
#: Email: dumb.droid.dev@outlook.com
#: Date: Aug-2020

#: Script defining various functions used in my daily linux work.
#: shellcheck disable=SC1090,SC1091
#: SC1090: Can't follow non-constant source. Use a directive to specify location.

## Repo sync with various flags I'm too lazy to type each time
function resync() {
    time repo sync --force-sync --no-clone-bundle --current-branch --no-tags --optimized-fetch -j4 $@
}

## I use this for keeping my repo mirrors up-to-date as they're owned by a system user
function remirror () {
	sudo -c 'time repo sync --force-sync --force-remove-dirty --no-clone-bundle -j4 $@'
}

## Function to display uptime of a system. All credits to the original author.
function upinfo() {
	echo -ne "${bmag} $(hostname) ${bred}uptime ${byel}is ${bwhi}:${bcya} 	\\n "
	 uptime | awk /'up/ {print $3,$4,$5,$6,$7,$8,$9,$10,$11}'
}

## Function run on login to display some stuff and set my custom PS1
function onLogin() {

    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWSTASHSTATE=1
    export GIT_PS1_SHOWUNTRACKEDFILES=1
    export GIT_PS1_SHOWUPSTREAM=auto
    export GIT_PS1_SHOWCOLORHINTS=1
#    unset PS1
#    PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '
#    if [[ -f "${HOME}/git-prompt.sh" ]]; then
#        source ~/git-prompt.sh
#        PS1='| \h (\w)$(__git_ps1 " {%s}") |-> '
#    else
#        PS1='| \h (\w) |-> '
#    fi

    clear
        HOST=$(hostname)
    if [[ ${#HOST} -lt 14 ]]; then
        echo -e "${lightgray}"
        figlet -c "$(hostname)"
    fi
    echo ""
    echo -ne "${red}Today is:\\t\\t${cyan} $(date)"
    echo ""
    echo -e "${red}Kernel Information: \\t${cyan} $(uname -smr)"
    echo -ne "${cyan}"
    upinfo
    echo ""
    echo -e "Welcome to $(hostname), $(whoami)!"
    echo -e
    fortune
}

## Function to extract a file or image no matter the program used for compression
function extract {
 if [ -z "$1" ]; then
      # display usage if no parameters given
      echo -e "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
      echo -e "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
      return 1
 else
      for n in $@
      do
        if [ -f "$n" ] ; then
             case "${n%,}" in
               *.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
                            tar xvf "$n"       ;;
               *.lzma)      unlzma ./"$n"      ;;
               *.bz2)       bunzip2 ./"$n"     ;;
               *.rar)       unrar x -ad ./"$n" ;;
               *.gz)        gunzip ./"$n"      ;;
               *.zip)       unzip ./"$n"       ;;
               *.z)         uncompress ./"$n"  ;;
                *.7z|*.arj|*.cab|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar)
                            7z x ./"$n"        ;;
               *.xz)        unxz ./"$n"        ;;
               *.exe)       cabextract ./"$n"  ;;
               *)
                            echo -e "extract: '$n' - unknown archive method"
                            return 1
                            ;;
             esac
         else
             echo -e "'$n' - file does not exist"
             return 1
        fi
      done
 fi
}

## Make a new directory and change into it.
function go () {
	if [ -d $1 ]; then
		printf "%s\n" "The directory '$1' already exists..." "\nChanging directories!"
		cd $1
	else
		mkdir -pv $1
		cd $1
		echo -e "\e[33m$(pwd)"
	fi
}

## My attempt at monitoring commands using pv/progress...
function cpr () {
	time cp -ri $@ | pv -Ipet || return 1
}

function move () {
	time mv -iv $@ | progress -m || return 1
}

function rmf () {
	time sudo rm -rf $@ | pv -Ipet || return 1
}

## For the lazy ones that don't like having to type the URL everytime.
function clone () {
	time git clone https://github.com/$@
}

function lab () {
	time git clone https://gitlab.com/$@
}
